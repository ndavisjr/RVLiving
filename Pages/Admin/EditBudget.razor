@page "/admin/editbudget"

@using RVLiving.Data
@using RVLiving.Data.Models
@using RVLiving.Models

@inject IExpenseData _expenseDb

<style>
    .infodiv {
        padding: 2rem;
        width: 100%;
    }

    .done {
        padding-top: 2rem;
        left: 0;
    }

    .expenses {
        margin-top: 20px;
    }
</style>

<MatH4>Edit Expenses</MatH4>

<div class="done">
    <MatButton Link="budgeting" Raised="true">Done</MatButton>
</div>
<div class="expenses">
    @if (expenses is null)
    {
        <MatProgressCircle Closed="true" />
    }
    else
    {
        <MatPaper Elevation="2">
            <div class="infodiv">
                <table class="table table-sm table-responsive">
                    <thead>
                        <tr>
                            <th></th>
                            <th>Expense</th>
                            <th>Price ($)</th>
                            <th>Category</th>
                            <th>Notes</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var expense in expenses)
                        {
                            <tr>
                                <td>
                                    <MatButton Outlined="true" Icon="edit" OnClick="() => OpenEditExpenseDialog(expense)">Edit
                                    </MatButton>

                                    <MatDialog @bind-IsOpen="@dialogIsOpen">
                                        <MatDialogTitle>Edit Expense</MatDialogTitle>
                                        <MatDialogContent>
                                            <p>
                                                <MatTextField id="expenseName" @bind-Value="editExpense.ExpenseName"
                                            Label="Expense" Icon="label" />
                                            </p>
                                            <p>
                                                <MatTextField id="amount" @bind-Value="editExpense.Amount" Label="Cost"
                                            Icon="monetization_on" />
                                            </p>
                                            <p>
                                                <MatTextField id="category" @bind-Value="editExpense.Category" Label="Category"
                                            Icon="category" />
                                            </p>
                                            <p>
                                                <MatTextField id="notes" @bind-Value="editExpense.Notes" Label="Notes"
                                            Icon="notes" />
                                            </p>
                                        </MatDialogContent>
                                        <MatDialogActions>
                                            <MatButton OnClick="@(e => { dialogIsOpen = false; })">Cancel</MatButton>
                                            <MatButton OnClick="() => UpdateExpense(editExpense)">Update</MatButton>
                                        </MatDialogActions>
                                    </MatDialog>

                                    <MatButton Unelevated="true" Icon="delete_outline" OnClick="() => ConfirmDelete(expense)">
                                        Delete</MatButton>

                                    <MatDialog @bind-IsOpen="@deleteDialogIsOpen">
                                        <MatDialogTitle>Delete Expense</MatDialogTitle>
                                        <MatDialogContent>
                                            <MatSubtitle1>Are you sure you want to delete this Expense?</MatSubtitle1>
                                        </MatDialogContent>
                                        <MatDialogActions>
                                            <MatButton OnClick="@(e => { deleteDialogIsOpen = false; })">Cancel</MatButton>
                                            <MatButton OnClick="() => DeleteExpense(editExpense)">Delete</MatButton>
                                        </MatDialogActions>
                                    </MatDialog>
                                </td>

                                <td>@expense.ExpenseName</td>
                                <td>@expense.Amount</td>
                                <td>@expense.Category</td>
                                <td>@expense.Notes</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </MatPaper>
    }
</div>



@code {
    private bool dialogIsOpen, deleteDialogIsOpen = false;
    private List<ExpenseModel> expenses;
    private ExpenseModel editExpense = new ExpenseModel();

    private void OpenEditExpenseDialog(ExpenseModel expense)
    {
        this.editExpense = expense;
        dialogIsOpen = true;
    }

    private void ConfirmDelete(ExpenseModel expense)
    {
        this.editExpense = expense;
        deleteDialogIsOpen = true;
    }

    protected override async Task OnInitializedAsync()
    {
        expenses = await _expenseDb.GetExpenses();
    }

    private async Task DeleteExpense(ExpenseModel expense)
    {
        // close dialog
        deleteDialogIsOpen = false;

        // delete expense from db
        await _expenseDb.DeleteExpense(expense);

        // display new list minus deleted item without doing another call to the db
        expenses.Remove(expense);
    }

    private async Task UpdateExpense(ExpenseModel expense)
    {
        // close dialog
        dialogIsOpen = false;

        // update expense in db
        await _expenseDb.UpdateExpense(expense);

        //update the view
        this.StateHasChanged();
    }
}
